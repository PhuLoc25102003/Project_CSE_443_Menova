@model List<Menova.Models.Category>
@{
    ViewData["Title"] = "Quản lý danh mục";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@* Anti-forgery token for AJAX requests *@
@Html.AntiForgeryToken()

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@30.2.1/styles/ag-grid.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@30.2.1/styles/ag-theme-alpine.css" />
    <link rel="stylesheet" href="~/css/admin/ag-grid-custom.css" />
    <link rel="stylesheet" href="~/css/admin/page-header.css" />
    <link rel="stylesheet" href="~/css/admin/card-styling.css" />
    <link rel="stylesheet" href="~/css/admin/grid-components.css" />
    <link rel="stylesheet" href="~/css/admin/action-buttons.css" />
    <link rel="stylesheet" href="~/css/admin/category-management-optimized.css" />
}

<div class="category-management product-management-page">
    <div class="page-header">
        <div class="header-content">
            <h1>Quản lý danh mục</h1>
        </div>
        <div class="page-actions">
            <a asp-action="Create" class="btn btn-primary">
                <i class="fas fa-plus me-1"></i> Thêm danh mục mới
            </a>
        </div>
    </div>

    <div class="card category-form-card mb-4">
        <div class="card-header py-2">
            <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                <div class="d-flex align-items-center flex-wrap gap-2">
                    <button id="refreshGrid" class="btn btn-sm btn-outline-light">
                        <i class="fas fa-sync-alt me-1"></i> Làm mới
                    </button>
                    <button id="expandAllBtn" class="btn btn-sm btn-outline-light">
                        <i class="fas fa-expand-arrows-alt me-1"></i> Mở rộng tất cả
                    </button>
                </div>
                <div class="text-muted small">
                    <i class="fas fa-info-circle me-1"></i> Kéo thả để điều chỉnh cột
                </div>
            </div>
        </div>
        
        <div class="card-body p-0">
            <!-- AG Grid Container -->  
            <div id="categoriesGrid" class="ag-theme-alpine" style="width: 100%; height: 600px; display: block;"></div>
            
            <!-- Message when no data or grid fails -->
            <div id="noDataMessage" class="alert alert-info m-3" style="display: none;">
                <i class="fas fa-info-circle me-2"></i> Chưa có danh mục nào. Hãy thêm danh mục mới!
            </div>
            
            <!-- Fallback Table -->
            @if (Model != null && Model.Any())
            {
                <div id="fallbackTable" class="table-responsive m-3" style="display: none;">
                    <table class="table table-hover category-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Tên danh mục</th>
                                <th>Mô tả</th>
                                <th>Danh mục cha</th>
                                <th>Trạng thái</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in Model)
                            {
                                <tr class="@(!category.IsActive ? "table-secondary" : "")">
                                    <td>@category.CategoryId</td>
                                    <td>
                                        @if (category.ParentCategoryId == null)
                                        {
                                            <i class="fas fa-folder category-icon"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-file-alt subcategory-icon"></i>
                                        }
                                        @category.Name
                                    </td>
                                    <td>@(category.Description?.Length > 50 ? category.Description.Substring(0, 50) + "..." : category.Description)</td>
                                    <td>
                                        @if (category.ParentCategoryId != null)
                                        {
                                            var parentCategory = Model.FirstOrDefault(c => c.CategoryId == category.ParentCategoryId);
                                            if (parentCategory != null)
                                            {
                                                <span class="category-parent-badge">@parentCategory.Name</span>
                                            }
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (category.IsActive)
                                        {
                                            <span class="badge bg-success">Đang hiển thị</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Ẩn</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            @if (category.ParentCategoryId == null)
                                            {
                                                <a asp-action="Create" asp-route-parentId="@category.CategoryId" class="btn btn-sm btn-outline-success me-1" title="Thêm danh mục con">
                                                    <i class="fas fa-plus-circle"></i>
                                                </a>
                                            }
                                            <a asp-action="Edit" asp-route-id="@category.CategoryId" class="btn btn-sm btn-outline-primary me-1" title="Sửa">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <a asp-action="Details" asp-route-id="@category.CategoryId" class="btn btn-sm btn-outline-info me-1" title="Chi tiết">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <button type="button" onclick="confirmDeleteCategory(@category.CategoryId, '@category.Name')" class="btn btn-sm btn-outline-danger" title="Xóa">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community@30.2.1/dist/ag-grid-community.min.js"></script>
    <script src="~/js/admin/delete-confirmation.js"></script>
    <script src="~/js/admin/category-grid-init.js"></script>
    <script>
        function confirmDeleteCategory(categoryId, categoryName) {
            if (typeof Swal === 'undefined') {
                console.error('SweetAlert không khả dụng!');
                return;
            }
            
            Swal.fire({
                title: 'Xác nhận ẩn danh mục?',
                html: `
                    <div class="text-center">
                        <p>Bạn có chắc chắn muốn <strong class="text-danger">ẩn</strong> danh mục <strong>${categoryName}</strong>?</p>
                        <div class="alert alert-warning mt-3" role="alert">
                            <div class="d-flex align-items-center justify-content-center mb-2">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Lưu ý:</strong>
                            </div>
                            <p class="mb-0">Danh mục sẽ bị ẩn và không hiển thị cho khách hàng.</p>
                        </div>
                    </div>
                `,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Ẩn danh mục',
                cancelButtonText: 'Hủy',
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Gửi yêu cầu AJAX để ẩn danh mục
                    // Get anti-forgery token
                    const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    
                    fetch('@Url.Action("Delete", "Category", new { area = "Admin" })/' + categoryId, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': antiForgeryToken
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Thành công!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                // Refresh trang để cập nhật danh sách
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: 'Lỗi!',
                                text: data.message,
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Lỗi!',
                            text: 'Đã xảy ra lỗi khi xử lý yêu cầu.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
                }
            });
        }
    </script>
    <script>
        // Ensure DOM is fully loaded before initializing grid
        document.addEventListener("DOMContentLoaded", function() {
            // Prepare data
            const rowData = [];
            
            @if (Model != null && Model.Any())
            {
                // Add root categories first
                foreach (var rootCategory in Model.Where(c => c.ParentCategoryId == null))
                {
                    string rootDescription = rootCategory.Description ?? "";
                    if (rootDescription.Length > 100) {
                        rootDescription = rootDescription.Substring(0, 100) + "...";
                    }
                    
                    <text>
                    rowData.push({
                        categoryId: @rootCategory.CategoryId,
                        name: @Json.Serialize(rootCategory.Name),
                        description: @Json.Serialize(rootDescription),
                        parentName: "",
                        parentId: null,
                        isActive: @Json.Serialize(rootCategory.IsActive),
                        level: 0
                    });
                    </text>
                    
                    // Get children of this root category
                    var parentCategory = rootCategory;
                    foreach (var childCategory in Model.Where(c => c.ParentCategoryId == parentCategory.CategoryId))
                    {
                        string childDescription = childCategory.Description ?? "";
                        if (childDescription.Length > 100) {
                            childDescription = childDescription.Substring(0, 100) + "...";
                        }
                        
                        <text>
                        rowData.push({
                            categoryId: @childCategory.CategoryId,
                            name: @Json.Serialize(childCategory.Name),
                            description: @Json.Serialize(childDescription),
                            parentName: @Json.Serialize(parentCategory.Name),
                            parentId: @parentCategory.CategoryId,
                            isActive: @Json.Serialize(childCategory.IsActive),
                            level: 1
                        });
                        </text>
                        
                        // Add grandchildren
                        foreach (var grandchildCategory in Model.Where(c => c.ParentCategoryId == childCategory.CategoryId))
                        {
                            string grandchildDescription = grandchildCategory.Description ?? "";
                            if (grandchildDescription.Length > 100) {
                                grandchildDescription = grandchildDescription.Substring(0, 100) + "...";
                            }
                            
                            <text>
                            rowData.push({
                                categoryId: @grandchildCategory.CategoryId,
                                name: @Json.Serialize(grandchildCategory.Name),
                                description: @Json.Serialize(grandchildDescription),
                                parentName: @Json.Serialize(childCategory.Name),
                                parentId: @childCategory.CategoryId,
                                isActive: @Json.Serialize(grandchildCategory.IsActive),
                                level: 2
                            });
                            </text>
                        }
                    }
                }
            }
            
            // URL configuration for action buttons
            const urlConfig = {
                createUrl: '@Url.Action("Create", "Category", new { area = "Admin" })',
                editUrl: '@Url.Action("Edit", "Category", new { area = "Admin" })',
                detailsUrl: '@Url.Action("Details", "Category", new { area = "Admin" })',
                deleteFunc: 'confirmDeleteCategory'
            };
            
            // Initialize the grid - moved outside of the grid-init.js DOMContentLoaded event
            // so we don't have nested DOMContentLoaded events
            setTimeout(function() {
                initializeCategoryGrid('categoriesGrid', 'fallbackTable', 'noDataMessage', rowData, urlConfig);
            }, 0);
        });
    </script>
} 