@model List<Menova.Models.Category>
@{
    ViewData["Title"] = "Quản lý danh mục";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/admin/category-management.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@30.2.1/styles/ag-grid.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@30.2.1/styles/ag-theme-alpine.css" />
    <link rel="stylesheet" href="~/css/admin/ag-grid-custom.css" />
    <style>
        /* Header styling from Edit page */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 1px solid #dee2e6;
        }
        
        .header-content h1 {
            margin: 0;
            font-size: 1.8rem;
            font-weight: 700;
        }
        
        .page-actions {
            display: flex;
            gap: 8px;
            align-items: center;
        }

        /* Card styling to match Product page */
        .category-management .card {
            border-radius: .75rem !important;
            box-shadow: 0 0.25rem 0.75rem rgba(0,0,0,0.1) !important;
            border: none !important;
            overflow: visible !important;
            position: relative !important;
            z-index: 1 !important;
            height: auto !important;
            min-height: auto !important;
            transition: box-shadow 0.3s ease;
        }

        .category-management .card:hover {
            box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;
        }
        
        /* Card header styling to match Product */
        .category-form-card .card-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 0.75rem 0.75rem 0 0;
        }

        .category-form-card .card-header .btn-sm {
            background-color: rgba(255, 255, 255, 0.15);
            border-color: rgba(255, 255, 255, 0.3);
            color: white;
        }

        .category-form-card .card-header .text-muted {
            color: rgba(255, 255, 255, 0.8) !important;
        }
    </style>
}

<div class="category-management product-management-page">
    <div class="page-header">
        <div class="header-content">
            <h1>Quản lý danh mục</h1>
        </div>
        <div class="page-actions">
            <a asp-action="Create" class="btn btn-primary">
                <i class="fas fa-plus me-1"></i> Thêm danh mục mới
            </a>
        </div>
    </div>

    <div class="card category-form-card mb-4">
        <div class="card-header py-2">
            <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                <div class="d-flex align-items-center flex-wrap gap-2">
                    <button id="refreshGrid" class="btn btn-sm btn-outline-light">
                        <i class="fas fa-sync-alt me-1"></i> Làm mới
                    </button>
                    <button id="expandAllBtn" class="btn btn-sm btn-outline-light">
                        <i class="fas fa-expand-arrows-alt me-1"></i> Mở rộng tất cả
                    </button>
                </div>
                <div class="text-muted small">
                    <i class="fas fa-info-circle me-1"></i> Kéo thả để điều chỉnh cột
                </div>
            </div>
        </div>
        
        <div class="card-body p-0">
            <!-- AG Grid Container -->  
            <div id="categoriesGrid" class="ag-theme-alpine" style="width: 100%; height: 600px; display: block;"></div>
            
            <!-- Message when no data or grid fails -->
            <div id="noDataMessage" class="alert alert-info m-3" style="display: none;">
                <i class="fas fa-info-circle me-2"></i> Chưa có danh mục nào. Hãy thêm danh mục mới!
            </div>
            
            <!-- Fallback Table -->
            @if (Model != null && Model.Any())
            {
                <div id="fallbackTable" class="table-responsive m-3" style="display: none;">
                    <table class="table table-hover category-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Tên danh mục</th>
                                <th>Mô tả</th>
                                <th>Danh mục cha</th>
                                <th>Trạng thái</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in Model)
                            {
                                <tr class="@(!category.IsActive ? "table-secondary" : "")">
                                    <td>@category.CategoryId</td>
                                    <td>
                                        @if (category.ParentCategoryId == null)
                                        {
                                            <i class="fas fa-folder category-icon"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-file-alt subcategory-icon"></i>
                                        }
                                        @category.Name
                                    </td>
                                    <td>@(category.Description?.Length > 50 ? category.Description.Substring(0, 50) + "..." : category.Description)</td>
                                    <td>
                                        @if (category.ParentCategoryId != null)
                                        {
                                            var parentCategory = Model.FirstOrDefault(c => c.CategoryId == category.ParentCategoryId);
                                            if (parentCategory != null)
                                            {
                                                <span class="category-parent-badge">@parentCategory.Name</span>
                                            }
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (category.IsActive)
                                        {
                                            <span class="badge bg-success">Đang hiển thị</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Ẩn</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            @if (category.ParentCategoryId == null)
                                            {
                                                <a asp-action="Create" asp-route-parentId="@category.CategoryId" class="btn btn-sm btn-outline-success me-1" title="Thêm danh mục con">
                                                    <i class="fas fa-plus-circle"></i>
                                                </a>
                                            }
                                            <a asp-action="Edit" asp-route-id="@category.CategoryId" class="btn btn-sm btn-outline-primary me-1" title="Sửa">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <a asp-action="Details" asp-route-id="@category.CategoryId" class="btn btn-sm btn-outline-info me-1" title="Chi tiết">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@category.CategoryId" class="btn btn-sm btn-outline-danger" title="Xóa">
                                                <i class="fas fa-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community@30.2.1/dist/ag-grid-community.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            console.log("DOM loaded, initializing grid...");
            
            // Initialize grid only if we have the container
            const gridDiv = document.getElementById('categoriesGrid');
            if (!gridDiv) {
                console.error("Grid container not found!");
                document.getElementById('fallbackTable').style.display = 'block';
                return;
            }
            
            // If agGrid is not available, show fallback table
            if (typeof agGrid === 'undefined') {
                console.error("AG Grid library not loaded!");
                document.getElementById('fallbackTable').style.display = 'block';
                return;
            }
            
            console.log("AG Grid found, preparing data...");
            
            // Prepare data
            const rowData = [];
            
            // Safely check if Model exists and has items
            const hasModelData = @Json.Serialize(Model != null && Model.Any());
            console.log("Model has data:", hasModelData);
            
            @if (Model != null && Model.Any())
            {
                // Add root categories first
                foreach (var rootCategory in Model.Where(c => c.ParentCategoryId == null))
                {
                    string rootDescription = rootCategory.Description ?? "";
                    if (rootDescription.Length > 100) {
                        rootDescription = rootDescription.Substring(0, 100) + "...";
                    }
                    
                    <text>
                    rowData.push({
                        categoryId: @rootCategory.CategoryId,
                        name: @Json.Serialize(rootCategory.Name),
                        description: @Json.Serialize(rootDescription),
                        parentName: "",
                        parentId: null,
                        isActive: @Json.Serialize(rootCategory.IsActive),
                        level: 0
                    });
                    </text>
                    
                    // Get children of this root category
                    var parentCategory = rootCategory;
                    foreach (var childCategory in Model.Where(c => c.ParentCategoryId == parentCategory.CategoryId))
                    {
                        string childDescription = childCategory.Description ?? "";
                        if (childDescription.Length > 100) {
                            childDescription = childDescription.Substring(0, 100) + "...";
                        }
                        
                        <text>
                        rowData.push({
                            categoryId: @childCategory.CategoryId,
                            name: @Json.Serialize(childCategory.Name),
                            description: @Json.Serialize(childDescription),
                            parentName: @Json.Serialize(parentCategory.Name),
                            parentId: @parentCategory.CategoryId,
                            isActive: @Json.Serialize(childCategory.IsActive),
                            level: 1
                        });
                        </text>
                        
                        // Add grandchildren
                        foreach (var grandchildCategory in Model.Where(c => c.ParentCategoryId == childCategory.CategoryId))
                        {
                            string grandchildDescription = grandchildCategory.Description ?? "";
                            if (grandchildDescription.Length > 100) {
                                grandchildDescription = grandchildDescription.Substring(0, 100) + "...";
                            }
                            
                            <text>
                            rowData.push({
                                categoryId: @grandchildCategory.CategoryId,
                                name: @Json.Serialize(grandchildCategory.Name),
                                description: @Json.Serialize(grandchildDescription),
                                parentName: @Json.Serialize(childCategory.Name),
                                parentId: @childCategory.CategoryId,
                                isActive: @Json.Serialize(grandchildCategory.IsActive),
                                level: 2
                            });
                            </text>
                        }
                    }
                }
            }
            
            // Check if we have data
            const hasData = rowData.length > 0;
            console.log("Data loaded:", hasData ? "Yes" : "No", "rowData length:", rowData.length);
            
            if (!hasData) {
                document.getElementById('noDataMessage').style.display = 'block';
                return;
            }
                
            // Cell renderers
            const nameCellRenderer = function(params) {
                const level = params.data.level;
                let icon = '<i class="fas fa-folder category-icon"></i>';
                let indentClass = '';
                
                if (level === 1) {
                    icon = '<i class="fas fa-file-alt subcategory-icon"></i>';
                    indentClass = 'indent-1';
                } else if (level === 2) {
                    icon = '<i class="fas fa-file grandchild-icon"></i>';
                    indentClass = 'indent-2';
                }
                
                return '<div class="category-name-cell ' + indentClass + '">' + icon + ' ' + params.value + '</div>';
            };
            
            const parentCellRenderer = function(params) {
                if (!params.value) return '-';
                return '<span class="category-parent-badge">' + params.value + '</span>';
            };
            
            const statusCellRenderer = function(params) {
                if (params.value) {
                    return '<div class="status-badge-container status-green"><p>Đang hiển thị</p></div>';
                } else {
                    return '<div class="status-badge-container status-red"><p>Ẩn</p></div>';
                }
            };
            
            const actionCellRenderer = function(params) {
                const categoryId = params.data.categoryId;
                const level = params.data.level;
                const isActive = params.data.isActive;
                let addChildButton = '';
                
                if (level < 2) {
                    addChildButton = '<a href="@Url.Action("Create", "Category", new { area = "Admin" })?parentId=' + categoryId + 
                    '" class="btn btn-sm btn-outline-success me-1" title="Thêm danh mục con"><i class="fas fa-plus-circle"></i></a>';
                }
                
                return '<div class="d-flex justify-content-center action-buttons">' + 
                    '<form action="@Url.Action("ToggleStatus", "Category", new { area = "Admin" })" method="post" style="display:inline;">' +
                    '<input type="hidden" name="id" value="' + categoryId + '" />' +
                    '<button type="submit" class="btn btn-sm ' + (isActive ? 'btn-outline-warning' : 'btn-outline-success') + 
                    ' me-1" title="' + (isActive ? 'Ẩn danh mục' : 'Hiển thị danh mục') + '">' +
                    '<i class="fas ' + (isActive ? 'fa-eye-slash' : 'fa-eye') + '"></i>' +
                    '</button></form>' +
                    addChildButton +
                    '<a href="@Url.Action("Edit", "Category", new { area = "Admin" })/' + categoryId + 
                    '" class="btn btn-sm btn-outline-primary me-1" title="Sửa"><i class="fas fa-edit"></i></a>' +
                    '<a href="@Url.Action("Details", "Category", new { area = "Admin" })/' + categoryId + 
                    '" class="btn btn-sm btn-outline-info me-1" title="Chi tiết"><i class="fas fa-eye"></i></a>' +
                    '<a href="@Url.Action("Delete", "Category", new { area = "Admin" })/' + categoryId + 
                    '" class="btn btn-sm btn-outline-danger" title="Xóa"><i class="fas fa-trash"></i></a>' +
                '</div>';
            };
            
            // Column definitions
            const columnDefs = [
                { 
                    field: 'categoryId', 
                    headerName: 'ID', 
                    width: 70,
                    flex: 0.5,
                    filter: 'agNumberColumnFilter',
                    floatingFilter: true
                },
                { 
                    field: 'name', 
                    headerName: 'Tên danh mục', 
                    minWidth: 180,
                    flex: 3,
                    filter: 'agTextColumnFilter',
                    floatingFilter: true,
                    cellRenderer: nameCellRenderer
                },
                { 
                    field: 'description', 
                    headerName: 'Mô tả', 
                    minWidth: 200,
                    flex: 4,
                    filter: 'agTextColumnFilter',
                    floatingFilter: true
                },
                { 
                    field: 'parentName', 
                    headerName: 'Danh mục cha', 
                    width: 140,
                    flex: 1.5,
                    filter: 'agTextColumnFilter',
                    floatingFilter: true,
                    cellRenderer: parentCellRenderer
                },
                { 
                    field: 'isActive', 
                    headerName: 'Trạng thái', 
                    width: 130,
                    flex: 0,
                    filter: 'agSetColumnFilter',
                    filterParams: {
                        values: [true, false],
                        cellRenderer: params => params.value ? 'Đang hiển thị' : 'Ẩn'
                    },
                    floatingFilter: true,
                    cellRenderer: statusCellRenderer,
                    cellClass: 'cell-status text-center',
                    autoHeight: false,
                    wrapText: false
                },
                { 
                    field: 'categoryId', 
                    headerName: 'Thao tác', 
                    minWidth: 220,
                    width: 220,
                    maxWidth: 220,
                    flex: 0,
                    cellRenderer: actionCellRenderer,
                    filter: false,
                    floatingFilter: false,
                    sortable: false,
                    resizable: false,
                    pinned: 'right',
                    cellClass: 'cell-actions text-center',
                    lockPinned: true,
                    suppressSizeToFit: true
                }
            ];
            
            // Grid options
            const gridOptions = {
                columnDefs: columnDefs,
                rowData: rowData,
                defaultColDef: {
                    flex: 1,
                    minWidth: 80,
                    sortable: true,
                    resizable: true,
                    filter: true
                },
                enableRangeSelection: true,
                animateRows: true,
                pagination: true,
                paginationPageSize: 20,
                enableCellTextSelection: true,
                rowSelection: 'multiple',
                suppressRowClickSelection: true,
                domLayout: 'normal',
                suppressScrollOnNewData: true,
                headerHeight: 48,
                rowHeight: 56
            };
            
            // Xử lý lỗi trong quá trình khởi tạo grid
            try {
                console.log("Initializing grid...");
                const grid = new agGrid.Grid(gridDiv, gridOptions);
                console.log("Grid created");
                
                // Size columns to fit after grid is ready
                setTimeout(function() {
                    gridOptions.api.sizeColumnsToFit();
                    
                    // Remove fixed column width to make it responsive
                    // Make sure action column has minimum width but can resize
                    const actionColumn = gridOptions.columnApi.getColumn('categoryId');
                    if (actionColumn) {
                        gridOptions.columnApi.setColumnMinWidth(actionColumn, 180);
                    }
                }, 200);
                
                // Add window resize handler to make grid responsive
                window.addEventListener('resize', function() {
                    if (gridOptions.api) {
                        setTimeout(function() {
                            gridOptions.api.sizeColumnsToFit();
                        }, 100);
                    }
                });
                
                // Add refresh button functionality
                const refreshBtn = document.getElementById('refreshGrid');
                if (refreshBtn) {
                    refreshBtn.addEventListener('click', function() {
                        location.reload();
                    });
                }
                
                // Add expand all functionality
                const expandAllBtn = document.getElementById('expandAllBtn');
                if (expandAllBtn) {
                    expandAllBtn.addEventListener('click', function() {
                        gridOptions.api.forEachNode(node => {
                            node.setExpanded(true);
                        });
                    });
                }
                
            } catch (error) {
                console.error("Error initializing AG Grid:", error);
                document.getElementById('fallbackTable').style.display = 'block';
                document.getElementById('categoriesGrid').style.display = 'none';
            }
        });
   </script>
} 