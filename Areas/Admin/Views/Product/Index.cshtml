@model IEnumerable<Product>
@{
    ViewData["Title"] = "Quản lý sản phẩm";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@30.2.1/styles/ag-grid.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community@30.2.1/styles/ag-theme-alpine.css" />
    <link rel="stylesheet" href="~/css/admin/ag-grid-custom.css" />
    <link rel="stylesheet" href="~/css/admin/page-header.css" />
    <link rel="stylesheet" href="~/css/admin/card-styling.css" />
    <link rel="stylesheet" href="~/css/admin/grid-components.css" />
    <link rel="stylesheet" href="~/css/admin/action-buttons.css" />
    <link rel="stylesheet" href="~/css/admin/product-management-optimized.css" />
}

<div class="product-management product-management-page">
    <div class="page-header">
        <div class="header-content">
            <h1>Quản lý sản phẩm</h1>
        </div>
        <div class="page-actions">
            <a asp-action="Create" class="btn btn-primary">
                <i class="fas fa-plus me-1"></i> Thêm sản phẩm mới
            </a>
        </div>
    </div>

    <div class="card product-form-card mb-4">
        <div class="card-header py-2">
            <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                <div class="d-flex align-items-center flex-wrap gap-2">
                    <button id="refreshGrid" class="btn btn-sm btn-outline-light">
                        <i class="fas fa-sync-alt me-1"></i> Làm mới
                    </button>
                    <button id="exportBtn" class="btn btn-sm btn-outline-light">
                        <i class="fas fa-file-excel me-1"></i> Xuất Excel
                    </button>
                    <div class="form-check form-switch ms-2">
                        <input class="form-check-input" type="checkbox" id="showActiveOnly" checked>
                        <label class="form-check-label small" for="showActiveOnly">Chỉ hiện đang bán</label>
                    </div>
                </div>
                <div class="text-muted small">
                    <i class="fas fa-info-circle me-1"></i> Kéo thả để điều chỉnh cột
                </div>
            </div>
        </div>
        
        <div class="card-body p-0">
            <!-- AG Grid Container -->
            <div id="productsGrid" class="ag-theme-alpine" style="width: 100%; height: 600px; display: block;"></div>
            
            <!-- Message when no data or grid fails -->
            <div id="noDataMessage" class="alert alert-info m-3" style="display: none;">
                <i class="fas fa-info-circle me-2"></i> Không có sản phẩm nào. Hãy thêm sản phẩm mới!
            </div>
            
            <!-- Fallback Table -->
            @if (Model != null && Model.Any())
            {
                <div id="fallbackTable" class="table-responsive m-3" style="display: none;">
                    <table class="table table-hover product-table">
                        <thead>
                            <tr>
                                <th style="width:60px;">Ảnh</th>
                                <th>Tên sản phẩm</th>
                                <th>SKU</th>
                                <th>Danh mục</th>
                                <th>Giá</th>
                                <th>Giảm giá</th>
                                <th>Kho hàng</th>
                                <th>Trạng thái</th>
                                <th style="width:160px;">Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in Model)
                            {
                                string imageUrl = !string.IsNullOrEmpty(product.ImageUrl) 
                                    ? product.ImageUrl 
                                    : (product.Images != null && product.Images.Any(i => i.IsPrimary) 
                                        ? product.Images.FirstOrDefault(i => i.IsPrimary).ImageUrl 
                                        : "/images/placeholder.png");
                                        
                                int totalStock = product.ProductVariants?.Sum(v => v.StockQuantity) ?? 0;
                                string stockClass = totalStock <= 5 ? "stock-danger" : (totalStock <= 10 ? "stock-warning" : "");
                                
                                <tr class="@(!product.IsActive ? "table-secondary" : "") align-middle" 
                                    data-category="@(product.Category?.Name ?? "")" 
                                    data-active="@product.IsActive.ToString().ToLower()">
                                    <td class="text-center">
                                        <img class="product-image-cell" src="@imageUrl" alt="@product.Name" />
                                    </td>
                                    <td>@product.Name</td>
                                    <td>@product.SKU</td>
                                    <td>@(product.Category?.Name ?? "Không có danh mục")</td>
                                    <td>@product.Price.ToString("N0") ₫</td>
                                    <td>@product.DiscountPrice.ToString("N0") ₫</td>
                                    <td class="text-center">
                                        <div class="stock-cell @stockClass">@totalStock</div>
                                    </td>
                                    <td class="text-center">
                                        @if (product.IsActive)
                                        {
                                            <span class="badge bg-success">Đang bán</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Ngừng bán</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            <a asp-action="Edit" asp-route-id="@product.ProductId" class="btn btn-sm btn-outline-primary" title="Sửa">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <a asp-action="Details" asp-route-id="@product.ProductId" class="btn btn-sm btn-outline-info" title="Chi tiết">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a asp-action="Variants" asp-route-id="@product.ProductId" class="btn btn-sm btn-outline-secondary" title="Biến thể">
                                                <i class="fas fa-cubes"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@product.ProductId" class="btn btn-sm btn-outline-danger" title="Xóa">
                                                <i class="fas fa-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                            @if (!Model.Any())
                            {
                                <tr>
                                    <td colspan="9" class="text-center py-4">
                                        <div class="alert alert-info mb-0">
                                            <i class="fas fa-info-circle me-2"></i> Không có sản phẩm nào
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community@30.2.1/dist/ag-grid-community.min.js"></script>
    <script src="~/js/admin/delete-confirmation.js"></script>
    <script src="~/js/admin/product-grid-init.js"></script>
    <script>
        // Ensure DOM is fully loaded before initializing grid
        document.addEventListener("DOMContentLoaded", function() {
            // Prepare data
            const rowData = [];
            
            @if (Model != null && Model.Any())
            {
                foreach (var product in Model)
                {
                    string imageUrl = !string.IsNullOrEmpty(product.ImageUrl) 
                        ? product.ImageUrl 
                        : (product.Images != null && product.Images.Any(i => i.IsPrimary) 
                            ? product.Images.FirstOrDefault(i => i.IsPrimary).ImageUrl 
                            : "/images/placeholder.png");
                            
                    int totalStock = product.ProductVariants?.Sum(v => v.StockQuantity) ?? 0;
                    
                    <text>
                    rowData.push({
                        productId: @product.ProductId,
                        name: @Json.Serialize(product.Name),
                        sku: @Json.Serialize(product.SKU ?? ""),
                        category: @Json.Serialize(product.Category?.Name ?? "Không có danh mục"),
                        categoryId: @(product.Category?.CategoryId ?? 0),
                        price: @product.Price.ToString(System.Globalization.CultureInfo.InvariantCulture),
                        formattedPrice: @Json.Serialize(product.Price.ToString("N0") + " ₫"),
                        discountPrice: @product.DiscountPrice.ToString(System.Globalization.CultureInfo.InvariantCulture),
                        formattedDiscountPrice: @Json.Serialize(product.DiscountPrice.ToString("N0") + " ₫"),
                        stockQuantity: @totalStock,
                        stockWarning: @(totalStock <= 10 ? "true" : "false"),
                        stockDanger: @(totalStock <= 5 ? "true" : "false"),
                        imageUrl: @Json.Serialize(imageUrl),
                        isActive: @Json.Serialize(product.IsActive)
                    });
                    </text>
                }
            }
            
            // URL configuration for action buttons
            const urlConfig = {
                editUrl: '@Url.Action("Edit", "Product", new { area = "Admin" })',
                detailsUrl: '@Url.Action("Details", "Product", new { area = "Admin" })',
                variantsUrl: '@Url.Action("Variants", "Product", new { area = "Admin" })',
                deleteUrl: '@Url.Action("Delete", "Product", new { area = "Admin" })'
            };
            
            // Initialize the grid - moved outside of the grid-init.js DOMContentLoaded event
            // so we don't have nested DOMContentLoaded events
            setTimeout(function() {
                initializeProductGrid('productsGrid', 'fallbackTable', 'noDataMessage', rowData, urlConfig);
            }, 0);
        });
    </script>
}