@model Menova.Areas.Admin.Models.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    string selectedDateRange = ViewData["SelectedDateRange"]?.ToString() ?? "week";
}

<div class="admin-dashboard">
    <!-- Page Header -->
    <div class="page-header">
        <h1>Dashboard</h1>
        <div class="date-selector">
            <span>Hiển thị dữ liệu: </span>
            <select id="date-range">
                <option value="today" selected="@(selectedDateRange == "today")">Hôm nay</option>
                <option value="week" selected="@(selectedDateRange == "week")">Tuần này</option>
                <option value="month" selected="@(selectedDateRange == "month")">Tháng này</option>
                <option value="year" selected="@(selectedDateRange == "year")">Năm nay</option>
            </select>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="stat-cards">
        <div class="stat-card">
            <div class="stat-card-icon bg-primary">
                <i class="fas fa-box"></i>
            </div>
            <div class="stat-card-info">
                <h3>Sản phẩm</h3>
                <p class="stat-number">@Model.TotalProducts</p>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-card-icon bg-success">
                <i class="fas fa-shopping-cart"></i>
            </div>
            <div class="stat-card-info">
                <h3>Đơn hàng</h3>
                <p class="stat-number">@Model.TotalOrders</p>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-card-icon bg-info">
                <i class="fas fa-users"></i>
            </div>
            <div class="stat-card-info">
                <h3>Khách hàng</h3>
                <p class="stat-number">@Model.TotalUsers</p>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-card-icon bg-warning">
                <i class="fas fa-money-bill"></i>
            </div>
            <div class="stat-card-info">
                <h3>Doanh thu</h3>
                <p class="stat-number">@String.Format("{0:N0}₫", Model.TotalRevenue)</p>
            </div>
        </div>
    </div>

    <!-- Sales Chart -->
    <div class="chart-container">
        <div class="chart-card">
            <div class="card-header">
                <h3>Doanh số bán hàng</h3>
                <div class="card-actions">
                    <button class="btn-icon" id="download-chart"><i class="fas fa-download"></i></button>
                    <button class="btn-icon"><i class="fas fa-ellipsis-v"></i></button>
                </div>
            </div>
            <div class="card-body">
                <div id="chart-loading" class="text-center d-none">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <canvas id="salesChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Recent Orders and Top Products -->
    <div class="dashboard-tables">
        <div class="table-card">
            <div class="card-header">
                <h3>Đơn hàng gần đây</h3>
                <a href="@Url.Action("Index", "Order", new { area = "Admin" })" class="view-all">Xem tất cả</a>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Mã đơn</th>
                            <th>Khách hàng</th>
                            <th>Ngày đặt</th>
                            <th>Tổng tiền</th>
                            <th>Trạng thái</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model.RecentOrders)
                        {
                            <tr>
                                <td>#@order.OrderId</td>
                                <td>@order.User.FullName</td>
                                <td>@order.OrderDate.ToString("dd/MM/yyyy")</td>
                                <td>@String.Format("{0:N0}₫", order.TotalAmount)</td>
                                <td>
                                    <span class="status-badge @GetStatusClass(order.OrderStatus)">
                                        @order.OrderStatus
                                    </span>
                                </td>
                                <td>
                                    <a href="@Url.Action("Detail", "Order", new { area = "Admin", id = order.OrderId })" class="btn-icon">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="table-card">
            <div class="card-header">
                <h3>Sản phẩm bán chạy</h3>
                <a href="@Url.Action("Index", "Product", new { area = "Admin" })" class="view-all">Xem tất cả</a>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Sản phẩm</th>
                            <th>Đã bán</th>
                            <th>Doanh thu</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Model.TopSellingProducts)
                        {
                            <tr>
                                <td>
                                    <div class="product-cell">
                                        <img src="@product.Product.ImageUrl" alt="@product.Product.Name" />
                                        <span>@product.Product.Name</span>
                                    </div>
                                </td>
                                <td>@product.TotalSales</td>
                                <td>@String.Format("{0:N0}₫", product.Revenue)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Low Stock Alert -->
    <div class="low-stock-alert">
        <div class="card-header">
            <h3>Cảnh báo tồn kho</h3>
            <a href="@Url.Action("LowStock", "Product", new { area = "Admin" })" class="view-all">Xem tất cả</a>
        </div>
        <div class="card-body">
            <div class="low-stock-items">
                @if (Model.LowStockProducts.Any())
                {
                    @foreach (var product in Model.LowStockProducts)
                    {
                        var activeVariants = product.ProductVariants.Where(v => v.IsActive).ToList();
                        int totalStock = activeVariants.Sum(v => v.StockQuantity);
                        int lowStockVariants = activeVariants.Count(v => v.StockQuantity < 5);
                        string colorClass = lowStockVariants > activeVariants.Count * 0.5 ? "danger" : "warning";
                        
                        <div class="low-stock-item">
                            <img src="@product.ImageUrl" alt="@product.Name" />
                            <div class="item-info">
                                <h4>@product.Name</h4>
                                <div class="stock-details">
                                    <div class="stock-status">
                                        <span class="stock-@colorClass">@totalStock sản phẩm còn lại</span>
                                    </div>
                                </div>
                            </div>
                            <a href="@Url.Action("Edit", "Product", new { area = "Admin", id = product.ProductId })" class="btn btn-primary">
                                Cập nhật
                            </a>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state text-center py-5">
                        <i class="fas fa-check-circle text-success fa-3x mb-3"></i>
                        <h4>Tất cả sản phẩm đều có đủ hàng tồn kho</h4>
                        <p class="text-muted">Không có sản phẩm nào cần bổ sung hàng tồn kho ngay lúc này.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let salesChart;
            // Set up sales chart
            const ctx = document.getElementById('salesChart').getContext('2d');
            
            // Khởi tạo biểu đồ với dữ liệu ban đầu
            initChartWithData(@Html.Raw(Json.Serialize(Model.SalesChartData.Labels)), 
                             @Html.Raw(Json.Serialize(Model.SalesChartData.Sales)), 
                             @Html.Raw(Json.Serialize(Model.SalesChartData.Orders)));

            // Date range selector
            document.getElementById('date-range').addEventListener('change', function() {
                const dateRange = this.value;
                updateChartData(dateRange);
            });
            
            // Tải dữ liệu biểu đồ mới khi thay đổi khoảng thời gian
            async function updateChartData(dateRange) {
                try {
                    showLoading(true);
                    
                    // Gọi API để lấy dữ liệu biểu đồ
                    const response = await fetch(`/Admin/Dashboard/GetChartData?dateRange=${dateRange}`);
                    
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    
                    const chartData = await response.json();
                    
                    // Cập nhật dữ liệu biểu đồ
                    updateChart(chartData.labels, chartData.sales, chartData.orders);
                    
                } catch (error) {
                    console.error('Error fetching chart data:', error);
                } finally {
                    showLoading(false);
                }
            }
            
            // Hiển thị hoặc ẩn trạng thái loading
            function showLoading(show) {
                const loadingElement = document.getElementById('chart-loading');
                if (show) {
                    loadingElement.classList.remove('d-none');
                } else {
                    loadingElement.classList.add('d-none');
                }
            }
            
            // Khởi tạo biểu đồ với dữ liệu
            function initChartWithData(labels, salesData, ordersData) {
                salesChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Doanh thu',
                                data: salesData,
                                borderColor: '#4e73df',
                                backgroundColor: 'rgba(78, 115, 223, 0.05)',
                                fill: true,
                                tension: 0.4
                            },
                            {
                                label: 'Đơn hàng',
                                data: ordersData,
                                borderColor: '#1cc88a',
                                backgroundColor: 'rgba(28, 200, 138, 0.05)',
                                fill: true,
                                tension: 0.4,
                                yAxisID: 'y1'
                            }
                        ]
                    },
                    options: {
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: {
                                    drawBorder: false
                                },
                                ticks: {
                                    callback: function(value) {
                                        return value.toLocaleString('vi-VN') + '₫';
                                    }
                                }
                            },
                            y1: {
                                beginAtZero: true,
                                position: 'right',
                                grid: {
                                    display: false
                                }
                            },
                            x: {
                                grid: {
                                    display: false
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top'
                            }
                        }
                    }
                });
            }
            
            // Cập nhật dữ liệu biểu đồ
            function updateChart(labels, salesData, ordersData) {
                salesChart.data.labels = labels;
                salesChart.data.datasets[0].data = salesData;
                salesChart.data.datasets[1].data = ordersData;
                salesChart.update();
            }
            
            // Xử lý chức năng tải xuống biểu đồ
            document.getElementById('download-chart').addEventListener('click', function() {
                const link = document.createElement('a');
                link.download = 'menova-sales-chart.png';
                link.href = salesChart.toBase64Image();
                link.click();
            });
        });
    </script>
}

@functions {
    public string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "bg-warning",
            "processing" => "bg-info",
            "shipped" => "bg-primary",
            "delivered" => "bg-success",
            "cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}